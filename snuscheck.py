import os
import json
import telebot
from telebot.types import Message, InputFile
from snusbase import search_domains
import logging
from datetime import datetime
import time

# C·∫•u h√¨nh logging cho ·ª©ng d·ª•ng
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("app.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

with open("config.json", "r") as f:
    config = json.load(f)

TELEGRAM_TOKEN = config["TELEGRAM_TOKEN"]
bot = telebot.TeleBot(TELEGRAM_TOKEN)

logging.info("Bot started")

@bot.message_handler(commands=['start'])
def send_welcome(message: Message):
    user_id = message.from_user.id if message.from_user else "unknown"
    logging.info(f"User {user_id} started bot.")
    bot.reply_to(message, "G·ª≠i file domains.txt ƒë·ªÉ b·∫Øt ƒë·∫ßu tra c·ª©u email tr√™n Snusbase.")

@bot.message_handler(content_types=['document'])
def handle_document(message: Message):
    user_id = message.from_user.id if message.from_user else "unknown"

    if not message.document:
        logging.warning(f"User {user_id} sent message without document.")
        bot.reply_to(message, "Vui l√≤ng g·ª≠i file .txt ch·ª©a danh s√°ch domain.")
        return
    if not message.document.file_name or not message.document.file_name.endswith('.txt'):
        logging.warning(f"User {user_id} sent file with invalid name: {message.document.file_name}")
        bot.reply_to(message, "Vui l√≤ng g·ª≠i file .txt ch·ª©a danh s√°ch domain.")
        return
    file_info = bot.get_file(message.document.file_id)
    if not file_info.file_path:
        user_id = message.from_user.id if message.from_user else "unknown"
        logging.error(f"Kh√¥ng th·ªÉ l·∫•y file t·ª´ Telegram cho user {user_id}")
        bot.reply_to(message, "Kh√¥ng th·ªÉ l·∫•y file t·ª´ Telegram. Vui l√≤ng th·ª≠ l·∫°i.")
        return
    file_path = f"/tmp/{message.document.file_name}"
    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)
        bot.reply_to(message, "Dowloaded file successfully")
    user_id = message.from_user.id if message.from_user else "unknown"
    logging.info(f"User {user_id} uploaded file: {file_path}")
    
    # ƒê·ªçc file v√† chia batch
    with open(file_path, "r", encoding="utf-8") as f:
        domains = [line.strip() for line in f if line.strip()]
    
    batch_size = 100
    result_filename = f"found_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    result_file = f"/tmp/{result_filename}"
    progress_filename = f"progress_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    progress_file = f"/tmp/{progress_filename}"
    
    written_emails = set()
    processed_domains = []  # L∆∞u danh s√°ch domain ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng
    failed_batches = []     # L∆∞u danh s√°ch batch b·ªã l·ªói
    total_batches = (len(domains) + batch_size - 1) // batch_size
    should_stop = False     # Flag ƒë·ªÉ d·ª´ng x·ª≠ l√Ω
    
    try:
        with open(result_file, "w", encoding="utf-8") as f_result:
            for i in range(0, len(domains), batch_size):
                if should_stop:
                    logging.info(f"D·ª´ng x·ª≠ l√Ω do t·∫•t c·∫£ API keys ƒë·ªÅu b·ªã l·ªói")
                    break
                    
                batch = domains[i:i+batch_size]
                batch_index = i // batch_size + 1
                current_domains = domains[i:i+batch_size]
                
                try:
                    logging.info(f"X·ª≠ l√Ω batch {batch_index}/{total_batches} v·ªõi {len(current_domains)} domains")
                    data = search_domains(batch)
                    
                    # L∆∞u domain ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng
                    processed_domains.extend(current_domains)
                    
                    # Ghi emails v√†o file k·∫øt qu·∫£
                    for table, entries in data.get("results", {}).items():
                        for entry in entries:
                            if "email" in entry and entry["email"] not in written_emails:
                                f_result.write(entry["email"] + "\n")
                                written_emails.add(entry["email"])
                    
                    logging.info(f"Batch {batch_index} ho√†n th√†nh th√†nh c√¥ng, t√¨m th·∫•y {len(written_emails)} emails")
                    
                except Exception as e:
                    user_id = message.from_user.id if message.from_user else "unknown"
                    logging.error(f"L·ªói khi truy v·∫•n batch {batch_index} cho user {user_id}: {e}")
                    
                    # L∆∞u th√¥ng tin batch b·ªã l·ªói
                    failed_batches.append({
                        'batch_index': batch_index,
                        'start_index': i,
                        'end_index': min(i + batch_size, len(domains)),
                        'domains': current_domains,
                        'error': str(e)
                    })
                    
                    # Ki·ªÉm tra xem c√≥ ph·∫£i t·∫•t c·∫£ API keys ƒë·ªÅu b·ªã l·ªói kh√¥ng
                    error_msg = str(e)
                    if "T·∫•t c·∫£ API keys ƒë·ªÅu kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã rate limit" in error_msg:
                        logging.warning(f"T·∫•t c·∫£ API keys ƒë·ªÅu b·ªã l·ªói, d·ª´ng x·ª≠ l√Ω t·∫°i batch {batch_index}")
                        bot.reply_to(message, f"üö® D·ª™NG X·ª¨ L√ù: T·∫•t c·∫£ API keys ƒë·ªÅu b·ªã l·ªói ho·∫∑c rate limit t·∫°i batch {batch_index}")
                        should_stop = True
                        break
                    elif "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Snusbase API" in error_msg:
                        bot.reply_to(message, f"‚ö†Ô∏è L·ªói batch {batch_index}: ƒê√£ th·ª≠ t·∫•t c·∫£ API key nh∆∞ng kh√¥ng th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c key trong config.json")
                        should_stop = True
                        break
                    elif "401" in error_msg or "429" in error_msg:
                        bot.reply_to(message, f"‚ö†Ô∏è L·ªói batch {batch_index}: API key b·ªã l·ªói ho·∫∑c rate limit, ƒë√£ t·ª± ƒë·ªông chuy·ªÉn sang key kh√°c")
                    else:
                        bot.reply_to(message, f"‚ö†Ô∏è L·ªói batch {batch_index}: {error_msg}")
                    
                    # Kh√¥ng break ƒë·ªÉ ti·∫øp t·ª•c v·ªõi batch ti·∫øp theo n·∫øu ch·ªâ l√† l·ªói key ƒë∆°n l·∫ª
                    continue
                
                time.sleep(1)
                
    finally:
        # T·∫°o file ti·∫øn ƒë·ªô v·ªõi th√¥ng tin chi ti·∫øt
        with open(progress_file, "w", encoding="utf-8") as f_progress:
            f_progress.write(f"=== B√ÅO C√ÅO TI·∫æN ƒê·ªò X·ª¨ L√ù ===\n")
            f_progress.write(f"Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f_progress.write(f"T·ªïng s·ªë domains: {len(domains)}\n")
            f_progress.write(f"T·ªïng s·ªë batch: {total_batches}\n")
            f_progress.write(f"Domains ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng: {len(processed_domains)}\n")
            f_progress.write(f"Emails t√¨m th·∫•y: {len(written_emails)}\n")
            f_progress.write(f"Batch b·ªã l·ªói: {len(failed_batches)}\n")
            
            if should_stop:
                f_progress.write(f"Tr·∫°ng th√°i: D·ª™NG X·ª¨ L√ù do t·∫•t c·∫£ API keys ƒë·ªÅu b·ªã l·ªói\n")
                if failed_batches:
                    last_failed = failed_batches[-1]
                    f_progress.write(f"ƒêi·ªÉm d·ª´ng: Batch {last_failed['batch_index']} (Index {last_failed['start_index']}-{last_failed['end_index']-1})\n")
            else:
                f_progress.write(f"Tr·∫°ng th√°i: HO√ÄN TH√ÄNH to√†n b·ªô\n")
            
            f_progress.write("\n")
            
            if processed_domains:
                f_progress.write("=== DOMAINS ƒê√É X·ª¨ L√ù TH√ÄNH C√îNG ===\n")
                for i, domain in enumerate(processed_domains):
                    f_progress.write(f"{i+1:4d}. {domain}\n")
                f_progress.write("\n")
            
            if failed_batches:
                f_progress.write("=== BATCH B·ªä L·ªñI ===\n")
                for batch_info in failed_batches:
                    f_progress.write(f"Batch {batch_info['batch_index']} (Index {batch_info['start_index']}-{batch_info['end_index']-1}):\n")
                    f_progress.write(f"  L·ªói: {batch_info['error']}\n")
                    f_progress.write(f"  Domains: {', '.join(batch_info['domains'])}\n\n")
        
        # G·ª≠i file k·∫øt qu·∫£ emails
        with open(result_file, "rb") as f:
            if should_stop:
                caption = f"üõë D·ª™NG X·ª¨ L√ù: T√¨m th·∫•y {len(written_emails)} emails t·ª´ {len(processed_domains)} domains"
                if failed_batches:
                    last_failed = failed_batches[-1]
                    caption += f"\n‚ö†Ô∏è D·ª´ng t·∫°i batch {last_failed['batch_index']} (Index {last_failed['start_index']}-{last_failed['end_index']-1})"
                caption += f"\nüîç Xem file progress ƒë·ªÉ bi·∫øt chi ti·∫øt"
            else:
                caption = f"‚úÖ Ho√†n th√†nh: T√¨m th·∫•y {len(written_emails)} emails t·ª´ {len(processed_domains)} domains"
            
            bot.send_document(message.chat.id, f, caption=caption, reply_to_message_id=message.message_id)
        
        # G·ª≠i file ti·∫øn ƒë·ªô
        with open(progress_file, "rb") as f:
            if should_stop:
                bot.send_document(message.chat.id, f, caption="üìä B√°o c√°o ti·∫øn ƒë·ªô (ƒê√É D·ª™NG)", reply_to_message_id=message.message_id)
            else:
                bot.send_document(message.chat.id, f, caption="üìä B√°o c√°o ti·∫øn ƒë·ªô (HO√ÄN TH√ÄNH)", reply_to_message_id=message.message_id)
        
        user_id = message.from_user.id if message.from_user else "unknown"
        if should_stop:
            logging.info(f"Sent result files to user {user_id}: D·ª™NG X·ª¨ L√ù - {len(written_emails)} emails, {len(processed_domains)} domains processed")
        else:
            logging.info(f"Sent result files to user {user_id}: HO√ÄN TH√ÄNH - {len(written_emails)} emails, {len(processed_domains)} domains processed")

if __name__ == "__main__":
    bot.remove_webhook()
    bot.infinity_polling() 